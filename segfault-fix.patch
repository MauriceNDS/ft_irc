diff --git a/Makefile b/Makefile
index 81ebce6..a4c6d32 100644
--- a/Makefile
+++ b/Makefile
@@ -15,7 +15,7 @@ RM = rm -rf
 all:    $(MAIN)
 
 $(MAIN):
-		clang++ -Wall -Wextra -std=c++98 -fsanitize=address -I includes -I includes/modules `find . -name "*.cpp"`
+		clang++ -Wall -Wextra -std=c++98 -fsanitize=address -g3 -I includes -I includes/modules `find . -name "*.cpp"`
 
 %.o: %.cpp $(HEADER)
 		$(CC) $(CFLAGS) -c $<  -o $@
diff --git a/includes/modules/api/Channel.hpp b/includes/modules/api/Channel.hpp
index 250fbc9..996f85e 100644
--- a/includes/modules/api/Channel.hpp
+++ b/includes/modules/api/Channel.hpp
@@ -13,7 +13,7 @@ class Channel : public CommandSender {
 private:
 	string name;
 	string topic;
-    set<User *> users;
+	set<User *> users;
 	set<User *> chanop;
 
 public:
diff --git a/includes/modules/api/exception/ArgumentNotFoundException.hpp b/includes/modules/api/exception/ArgumentNotFoundException.hpp
index 013438c..81863a5 100644
--- a/includes/modules/api/exception/ArgumentNotFoundException.hpp
+++ b/includes/modules/api/exception/ArgumentNotFoundException.hpp
@@ -6,8 +6,8 @@
 struct ArgumentNotFoundException : public std::exception {
 
 	const char *what() const throw () {
-    	return "Unknown argument";
-    }
+		return "Unknown argument";
+	}
 };
 
 #endif /* FT_IRC_API_ARGUMENT_NOT_FOUND_EXCEPTION */
diff --git a/includes/modules/api/exception/DuplicatedCommandException.hpp b/includes/modules/api/exception/DuplicatedCommandException.hpp
index add164c..2604b2d 100644
--- a/includes/modules/api/exception/DuplicatedCommandException.hpp
+++ b/includes/modules/api/exception/DuplicatedCommandException.hpp
@@ -6,8 +6,8 @@
 struct DuplicatedCommandException : public std::exception {
 
 	const char *what() const throw () {
-    	return "This command already exists.";
-    }
+		return "This command already exists.";
+	}
 };
 
 #endif /* FT_IRC_API_DUPLICATED_COMMAND_EXCEPTION */
diff --git a/includes/modules/core/Irc.hpp b/includes/modules/core/Irc.hpp
index d883824..105476a 100644
--- a/includes/modules/core/Irc.hpp
+++ b/includes/modules/core/Irc.hpp
@@ -21,8 +21,8 @@ private:
 	Server server;
 	CommandManager commandManager;
 
-    map<string, Channel *> channels;
-    vector<User *> users;
+	map<string, Channel *> channels;
+	vector<User *> users;
 	set<User *> operators;
 
 public:
diff --git a/includes/modules/core/command/KickCommand.hpp b/includes/modules/core/command/KickCommand.hpp
index d7cd3a3..519b6a4 100644
--- a/includes/modules/core/command/KickCommand.hpp
+++ b/includes/modules/core/command/KickCommand.hpp
@@ -21,10 +21,10 @@ class KickCommand : public CommandExecutor {
 		User *user = cmd.getArg<User *>("user");
 		if (!channel) {
 			sender.send(ResponseTypes::ERR_NOSUCHCHANNEL());
-			return ;
+			return;
 		} else if (!channel->isChanop(static_cast<User *>(&sender))) {
 			sender.send(ResponseTypes::ERR_CHANOPRIVSNEEDED(channel->getName().c_str()));
-			return ;
+			return;
 		}
 		channel->removeUser(user);
 		if (message) {
diff --git a/includes/modules/core/command/PrivmsgCommand.hpp b/includes/modules/core/command/PrivmsgCommand.hpp
index b0ca8a0..a013d8f 100644
--- a/includes/modules/core/command/PrivmsgCommand.hpp
+++ b/includes/modules/core/command/PrivmsgCommand.hpp
@@ -15,14 +15,14 @@
 class PrivmsgCommand : public CommandExecutor {
 
 	void execute(const Command& cmd, CommandSender& sender) {
+		User &user = static_cast<User &>(sender);
 
 		vector<CommandSender *>& target = cmd.getArg<vector<CommandSender *> >("msgtarget");
-		User &user = static_cast<User &>(sender);
 		string from = user.getNickName() + "!" + user.getUserName() + "@" + Irc::getInstance().getServer().getHost();
 		string message = cmd.getArg<string>("message") + "\n";
 
 		for (vector<CommandSender *>::iterator it = target.begin(); it != target.end(); it++) {
-			if(Channel::isValidIdentifier((*it)->getName())) {
+			if (Channel::isValidIdentifier((*it)->getName())) {
 				if (Irc::getInstance().getChannels().find((*it)->getName()) != Irc::getInstance().getChannels().end()) {
 					if (!Irc::getInstance().getChannels().find((*it)->getName())->second->isOnChan(static_cast<User *>(&sender))) {
 						sender.send(ResponseTypes::ERR_NOTONCHANNEL((*it)->getName().c_str(), sender.getName().c_str()));
diff --git a/includes/modules/core/command/TopicCommand.hpp b/includes/modules/core/command/TopicCommand.hpp
index 6763c95..48eb507 100644
--- a/includes/modules/core/command/TopicCommand.hpp
+++ b/includes/modules/core/command/TopicCommand.hpp
@@ -20,12 +20,12 @@ class TopicCommand : public CommandExecutor {
 		string *topic = cmd.getArg<string *>("topic");
 		if (!channel->isOnChan(static_cast<User *>(&sender))) {
 			sender.send(ResponseTypes::ERR_NOTONCHANNEL(channel->getName().c_str()));
-			return ;
+			return;
 		}
 		else if (topic) {
 			if (!channel->isChanop(static_cast<User *>(&sender))) {
 				sender.send(ResponseTypes::ERR_CHANOPRIVSNEEDED(channel->getName().c_str()));
-				return ;
+				return;
 			}
 			channel->setTopic(*topic);
 		} else {
diff --git a/modules/api/Channel.cpp b/modules/api/Channel.cpp
index 403e7e6..37ba5cd 100644
--- a/modules/api/Channel.cpp
+++ b/modules/api/Channel.cpp
@@ -3,20 +3,20 @@
 #include "api/ResponseTypes.hpp"
 
 bool Channel::isChanop(User *user) {
-    set<User *>::iterator it = chanop.find(user);
-    if (it == chanop.end()) {
-        if (!Irc::getInstance().isOperator(user))
-            return (false);
-    }
-    return (true);
+	set<User *>::iterator it = chanop.find(user);
+	if (it == chanop.end()) {
+		if (!Irc::getInstance().isOperator(user))
+			return (false);
+	}
+	return (true);
 }
 
 void Channel::removeUser(User *user) {
-    if (!isOnChan(user)) {
-        user->send(ResponseTypes::ERR_NOTONCHANNEL(this->getName().c_str()));
-        return ;
-    }
-    users.erase(user);
-    if (!users.size())
-        Irc::getInstance().removeChannel(this);
+	if (!isOnChan(user)) {
+		user->send(ResponseTypes::ERR_NOTONCHANNEL(this->getName().c_str()));
+		return;
+	}
+	users.erase(user);
+	if (!users.size())
+		Irc::getInstance().removeChannel(this);
 }
diff --git a/modules/api/command/CommandManager.cpp b/modules/api/command/CommandManager.cpp
index a978726..bb7bee0 100644
--- a/modules/api/command/CommandManager.cpp
+++ b/modules/api/command/CommandManager.cpp
@@ -17,7 +17,7 @@ void CommandManager::process(MessageEvent& event) {
 	it = cspecs.find(command);
 	if (it == cspecs.end()) {
 		event.getSender().send(ResponseTypes::ERR_UNKNOWNCOMMAND(command.c_str()));
-		return ;
+		return;
 	}
 
 	bool lastStr = false;
diff --git a/modules/api/command/CommandSpec.cpp b/modules/api/command/CommandSpec.cpp
index 28771ff..4623b16 100644
--- a/modules/api/command/CommandSpec.cpp
+++ b/modules/api/command/CommandSpec.cpp
@@ -10,7 +10,7 @@ void CommandSpec::call(vector<string>& tokens, MessageEvent& event) const {
 
 	// Middleware protection
 	if (_middleware && !_middleware->handle(event.getSender()))
-		return ;
+		return;
 
 	// Converting string to elements
 	for (it = _parameters.begin(); it != _parameters.end() && !event.isCancelled(); it++) {
@@ -26,7 +26,6 @@ void CommandSpec::call(vector<string>& tokens, MessageEvent& event) const {
 		if (value)
 			args.insert(make_pair(it->first, value));
 		else {
-			it->second->destroy(value);
 			event.setCancelled(true);
 			break ;
 		}
diff --git a/modules/server/Server.cpp b/modules/server/Server.cpp
index 2cc4f60..c9ba4e6 100644
--- a/modules/server/Server.cpp
+++ b/modules/server/Server.cpp
@@ -120,11 +120,11 @@ void Server::incomingRequest(size_t index) {
 			if (errno != EWOULDBLOCK) {
 				connections[index]->closeConnection = true;
 			}
-			return ;
+			return;
 		}
 		else if (ret == 0) {
 			connections[index]->closeConnection = true;
-			return ;
+			return;
 		}
 		buffer[ret] = 0;
 		connections[index]->request += buffer;
